<?php

namespace WebApi;


class WebApiMetaData implements \JsonSerializable {

	private $endpoint;
	private $connection;
	private $entity_map;

	public $dataServices;	
	public $structuralTypes;
	public $resourceEntityTypeMap;
	
	function __construct($connection, $endpoint = 'webapi') {
		$this->connection = $connection;
		$this->endpoint = $endpoint;
		$this->construct_data_services();
		$this->construct_structural_types();
		$this->construct_entity_map();
	}
	
	private function construct_data_services() {
		$this->dataServices[] = array(
			"serviceName" => "/".$this->endpoint."/".$this->connection."/",
			"hasServerMetadata" => true,
			"jsonResultsAdapter" => "webApi_default",
			"useJsonp" => false );
	}

	private function construct_structural_types() {
		$tables = ORM\ORM::get_tables($this->connection);
		
		if($tables) {
			foreach($tables as $key => $value) {
				$structure = new WebApiStructuralType($this->connection, $value['table_name']);
				$this->structuralTypes[] = $structure;
				$this->entity_map[$structure->defaultResourceName] = $structure;
			}
		}
	}
		
	function jsonSerialize() {
        return $this;
    }

	private function construct_entity_map() {
		$this->resourceEntityTypeMap = [];
		
		foreach ($this->entity_map as $entity_name => $entity) {
			$this->resourceEntityTypeMap[$entity_name] = "{$entity->shortName}:#{$entity->namespace}"; 
		} 
	} 

	public function get_model($model_name) {
		return $this->entity_map[$model_name]->get_model();
	}

	public function get_structural_type($model_name) {
		return $this->entity_map[$model_name];
	}

}


class WebApiStructuralType {
	
	private $table_name;
	private $connection;
	private $dbnamespace;
	private $primary_key;
	
	public $shortName;
	public $namespace;
	public $autoGeneratedKeyType;
	public $defaultResourceName;
	public $dataProperties;
	//public $navigationProperties;

	function __construct($connection, $table_name) {
		$this->table_name = $table_name;
		$this->connection = $connection;
		$this->dbnamespace = $this->_underscore_to_pascal_case($this->connection);
		$this->namespace = "WebApi.ORM.{$this->dbnamespace}";
		$this->shortName = $this->_underscore_to_pascal_case($this->table_name);
		$this->autoGeneratedKeyType = "Identity";
		$this->defaultResourceName = $this->shortName;
		
		$this->construct_data_properties();
		$this->construct_navigation_properties();
		
	}
	
	private function construct_data_properties() {
		$properties = ORM\ORM::get_columns($this->table_name, $this->connection);
		$pkey = ORM\ORM::get_primary_key($this->table_name, $this->connection);
		
		$this->primary_key = ($pkey) ? $pkey[0]["column_name"] : null;
		
		if(sizeof($properties) > 0) {
		
			$this->dataProperties = [];
			
			foreach ($properties as $row) {
				$item = [];
				$item["name"] = $row["column_name"];
				if ($row["column_name"] == $this->primary_key) {
					$item["isPartOfKey"] = true;
				}
				$item["isNullable"] = ($row["is_nullable"] == "YES" ? true : false);
				if($row["column_default"] != null && $row["column_name"] != $pkey) {
					$item["defaultValue"] = $row["column_default"];
				}
				if ($row["character_maximum_length"] != null) {
					$item["maxLength"] = $row["character_maximum_length"];
				}
				$item["dataType"] = $this->_match_pg_type($row["udt_name"]);
				array_push($this->dataProperties, $item);
			}			
		}
	}
	
	private function construct_navigation_properties() {
		$properties = ORM\ORM::get_foreign_keys($this->table_name, $this->connection);

		if(sizeof($properties) > 0) {
			
			$this->navigationProperties = [];

			foreach ($properties as $row) {
				$nav = [];
				
				if($row["table_name"] == $this->table_name) {
					$nav["name"] = $row["foreign_table_name"];
					$nav["entityTypeName"] = $this->_underscore_to_pascal_case($row["foreign_table_name"]).":#" . $this->namespace;
					$nav["isScalar"] = false;
					$nav["associationName"] = $row["constraint_name"];
					if($row["column_name"] != $this->primary_key) { 
						$nav["foreignKeyNames"] = [$row["column_name"],$row["foreign_column_name"]];
					} else {
						$nav["foreignKeyNames"] = [$row["foreign_column_name"]];
					}
					
				} else {
					$nav["name"] = $row["table_name"];
					$nav["entityTypeName"] = $this->_underscore_to_pascal_case($row["table_name"]).":#" . $this->namespace;
					$nav["isScalar"] = true;						
					$nav["associationName"] = $row["constraint_name"];
					$nav["invForeignKeyNames"] = [$row["column_name"]];
				}
				array_push($this->navigationProperties, $nav);
			}				
		}	
		
	}
	
	private function _underscore_to_pascal_case($name) {
		return preg_replace('/(?:^|_)(.?)/e',"strtoupper('$1')",$name);
	}

	private function _match_pg_type($type) {
		switch ($type)
		{
			case "int": return "Byte";			
			case "int2": return "Int16";
			case "int4": return "Int32";
			case "int8": return "Int64";
			case "varchar":
			case "text":
			case "char":
			case "bpchar": return "String";
			case "bool": return "Boolean";
			case "date":
			case "timetz":
			case "timestamp": return "DateTime";
			case "timestamptz": return "DateTime";
			case "decimal":
			case "float4":
			case "float8": return "Decimal";
			case "bytea": return "Binary";
			case "null": return "Null";
			default: return $type;
		}
	}

	public function get_model() {
		$model = "<?php\n\nnamespace WebApi\ORM\\{$this->dbnamespace};\n\nclass {$this->shortName} extends \WebApi\ORM\Model\n{\n";
		if($this->primary_key) {
			$model .= ($this->primary_key != "id") ? "\tpublic static \$_id_column = '{$this->primary_key}';\n" : "\n";
		}
		
		$model .= "\tpublic static \$_connection_name = '{$this->connection}';\n";
		
		if(property_exists($this,"navigationProperties")) {
			foreach($this->navigationProperties as $nav_property) {
				$foreign_table = $this->_underscore_to_pascal_case($nav_property['name']);
				$model .= "\n\tpublic function {$nav_property['name']}() {\n";
				$model .= "\t\treturn \$this->";
				if($nav_property["isScalar"]) {
					$model .=  "has_many('WebApi\ORM\\{$this->dbnamespace}\\{$foreign_table}', '{$nav_property['invForeignKeyNames'][0]}');\n";
				} else {
					$fkname = (isset($nav_property['foreignKeyNames'][1])) ? ",'{$nav_property['foreignKeyNames'][1]}'":"";
					$model .=  "belongs_to('WebApi\ORM\\{$this->dbnamespace}\\{$foreign_table}','{$nav_property['foreignKeyNames'][0]}'{$fkname});\n";
				}
				$model .= "\t}\n";
			}
		}
		$model .= "}\n";
		return $model;
	}
	
	public function get_navigation_property($property) {
		foreach ($this->navigationProperties as $navproperty) {
			if ($navproperty["name"] == $property) {
				return $navproperty;
			}
		}
		return null;
	}
	
	public function get_primary_key() {
		return $this->primary_key;
	}

}
