<?php

namespace WebApi;


class WebApiMetaData implements \JsonSerializable {

	private $endpoint;
	private $connection;
	private $entity_map;

	public $dataServices;	
	public $structuralTypes;
	public $resourceEntityTypeMap;
	
	function __construct($resource) {
		$this->resource = $resource;
		$this->construct_data_services();
		$this->construct_structural_types();
		$this->construct_entity_map();
	}
	
	private function construct_data_services() {
		$this->dataServices[] = array(
			"serviceName" => "/{$this->resource->get_endpoint()}/{$this->resource->get_name()}/",
			"hasServerMetadata" => true,
			"jsonResultsAdapter" => "webApi_default",
			"useJsonp" => false );
	}

	private function construct_structural_types() {
		$struct_types = $this->resource->get_structural_types();
		
		if($struct_types) {
			foreach($struct_types as $key => $value) {
				$structure = new WebApiStructuralType($this->resource, $value['structural_type']);
				$this->structuralTypes[] = $structure;
				$this->entity_map[$structure->defaultResourceName] = $structure;
			}
		}
	}
		
	function jsonSerialize() {
        return $this;
    }

	private function construct_entity_map() {
		$this->resourceEntityTypeMap = [];
		
		foreach ($this->entity_map as $entity_name => $entity) {
			$this->resourceEntityTypeMap[$entity_name] = "{$entity->shortName}:#{$entity->namespace}"; 
		} 
	} 

	public function get_structural_type($model_name) {
		return $this->entity_map[$model_name];
	}

}


class WebApiStructuralType {
	
	private $struct_type;
	private $resource;
	private $primary_key;
	private $nc;
	
	public $shortName;
	public $namespace;
	public $autoGeneratedKeyType;
	public $defaultResourceName;
	public $dataProperties;

	function __construct($resource, $struct_type) {
		
		$this->struct_type = $struct_type;
		$this->resource = $resource;
		$this->nc = $resource->get_nc();
		
		$dbnamespace = $this->parse_nc($this->resource->name);
		$this->namespace = "WebApi.ORM.{$dbnamespace}";
		$this->shortName = $this->parse_nc($this->struct_type);
		
		$this->defaultResourceName = $this->shortName;
		$this->autoGeneratedKeyType = "Identity";
		
		$this->construct_data_properties();
		$this->construct_navigation_properties();
		
	}
	
	private function parse_nc($string) {
		switch ($this->nc) {
			case NC_PASCAL: return preg_replace('/(?:^|_)(.?)/e',"strtoupper('$1')",$string);
			case NC_CAMEL: return lcfirst(preg_replace('/(?:^|_)(.?)/e',"strtoupper('$1')",$string));
			case NC_LOWERCASE:
				return strtolower(preg_replace(
					array('/\\\\/', '/(?<=[a-z])([A-Z])/', '/__/'),
					array('_', '_$1', '_'),
					ltrim($string, '\\')
				));
			case NC_NATIVE:
			default: return $string;
		}
	}
	
	private function construct_data_properties() {
		$properties = $this->resource->get_data_properties($this->struct_type);
		$pkey = $this->resource->get_primary_key($this->struct_type);
		
		$this->primary_key = ($pkey) ? $pkey[0]["name"] : null;
		
		if(sizeof($properties) > 0) {
		
			$this->dataProperties = [];
			
			foreach ($properties as $row) {
				$item = [];
				$item["name"] = $row["name"];
				if ($row["column_name"] == $this->primary_key) {
					$item["isPartOfKey"] = true;
				}
				$item["isNullable"] = ($row["is_nullable"] == "YES" ? true : false);
				if($row["default_value"] != null && $row["name"] != $pkey) {
					$item["defaultValue"] = $row["column_default"];
				}
				if ($row["max_length"] != null) {
					$item["maxLength"] = $row["max_length"];
				}
				$item["dataType"] = $this->resource->match_type($row["data_type"]);
				array_push($this->dataProperties, $item);
			}			
		}
	}
	
	private function construct_navigation_properties() {
		$properties = $this->resource->get_navigation_properties($this->struct_type);

		if(sizeof($properties) > 0) {
			
			$this->navigationProperties = [];

			foreach ($properties as $row) {
				$nav = [];
				
				if($row["table_name"] == $this->table_name) {
					$nav["name"] = $row["foreign_table_name"];
					$nav["entityTypeName"] = $this->parse_nc($row["foreign_table_name"]).":#" . $this->namespace;
					$nav["isScalar"] = true;
					$nav["associationName"] = $row["constraint_name"];
					//if($row["column_name"] != $this->primary_key) { 
					//	$nav["foreignKeyNames"] = [$row["column_name"],$row["foreign_column_name"]];
					//} else {
						$nav["foreignKeyNames"] = [$row["column_name"]];
					//}
					
				} else {
					$nav["name"] = $row["table_name"];
					$nav["entityTypeName"] = $this->parse_nc($row["table_name"]).":#" . $this->namespace;
					$nav["isScalar"] = false;						
					$nav["associationName"] = $row["constraint_name"];
					$nav["invForeignKeyNames"] = [$row["foreign_column_name"]];
				}
				array_push($this->navigationProperties, $nav);
			}				
		}	
		
	}
		
	public function get_navigation_property($property) {
		if(isset($this->navigationProperties)) {
		
			foreach ($this->navigationProperties as $navproperty) {
				if ($navproperty["name"] == $property) {
					return $navproperty;
				}
			}
		}
		return null;
	}

	public function get_data_property($property) {
		foreach ($this->dataProperties as $navproperty) {
			if ($navproperty["name"] == $property) {
				return $navproperty;
			}
		}
		return null;
	}
	
	public function get_primary_key() {
		return $this->primary_key;
	}

}
